[{"/Work2/SCSC/SCSC_FrontEnd/src/index.js":"1","/Work2/SCSC/SCSC_FrontEnd/src/cards/Main.js":"2","/Work2/SCSC/SCSC_FrontEnd/src/cards/DataCard.js":"3","/Work2/SCSC/SCSC_FrontEnd/src/cards/CreateNEditDatasetPane.js":"4","/Work2/SCSC/SCSC_FrontEnd/src/cards/InfoCard.js":"5","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/DatasetCreationPopup.js":"6","/Work2/SCSC/SCSC_FrontEnd/src/cards/popups/DataDownloadPopup.js":"7","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/DatasetCreationPane.js":"8","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/DataMetadata.js":"9","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/FilesUpload.js":"10","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/UploaderInfo.js":"11","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/ThankYou.js":"12","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/AccessControl.js":"13","/Work2/SCSC/SCSC_FrontEnd/src/pages/Home.js":"14","/Work2/SCSC/SCSC_FrontEnd/src/pages/Models.js":"15","/Work2/SCSC/SCSC_FrontEnd/src/pages/Visualization.js":"16","/Work2/SCSC/SCSC_FrontEnd/src/pages/Profile.js":"17","/Work2/SCSC/SCSC_FrontEnd/src/pages/Layout.jsx":"18","/Work2/SCSC/SCSC_FrontEnd/src/pages/Datasets.js":"19","/Work2/SCSC/SCSC_FrontEnd/src/components/SideBar.js":"20","/Work2/SCSC/SCSC_FrontEnd/src/components/Top_Menubar.js":"21"},{"size":987,"mtime":1686171747610,"results":"22","hashOfConfig":"23"},{"size":371,"mtime":1686172413523,"results":"24","hashOfConfig":"23"},{"size":2383,"mtime":1686166199406,"results":"25","hashOfConfig":"23"},{"size":977,"mtime":1686172167888,"results":"26","hashOfConfig":"23"},{"size":1074,"mtime":1686166199406,"results":"27","hashOfConfig":"23"},{"size":2858,"mtime":1686166199406,"results":"28","hashOfConfig":"23"},{"size":3658,"mtime":1686166199406,"results":"29","hashOfConfig":"23"},{"size":8855,"mtime":1686166199406,"results":"30","hashOfConfig":"23"},{"size":2377,"mtime":1686166199406,"results":"31","hashOfConfig":"23"},{"size":4215,"mtime":1686166199406,"results":"32","hashOfConfig":"23"},{"size":1840,"mtime":1686166199406,"results":"33","hashOfConfig":"23"},{"size":478,"mtime":1686166199406,"results":"34","hashOfConfig":"23"},{"size":12907,"mtime":1686166199406,"results":"35","hashOfConfig":"23"},{"size":246,"mtime":1686172242437,"results":"36","hashOfConfig":"23"},{"size":252,"mtime":1686172300917,"results":"37","hashOfConfig":"23"},{"size":273,"mtime":1686172464675,"results":"38","hashOfConfig":"23"},{"size":255,"mtime":1686172255433,"results":"39","hashOfConfig":"23"},{"size":777,"mtime":1686173769212,"results":"40","hashOfConfig":"23"},{"size":2133,"mtime":1686172206596,"results":"41","hashOfConfig":"23"},{"size":3669,"mtime":1686172498220,"results":"42","hashOfConfig":"23"},{"size":2319,"mtime":1686166199406,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1esw1l",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Work2/SCSC/SCSC_FrontEnd/src/index.js",["116"],[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/Main.js",["117","118","119"],[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/DataCard.js",["120","121","122","123","124","125"],[],"import DataDownloadPopup from \"./popups/DataDownloadPopup\";\n\nimport React from 'react';\nimport { ChangeEvent, useState } from 'react';\n\nfunction DataCard({ data_name, uploader_name, num_files, type_string, total_size, img_path }) {\n    const [open, setOpen] = React.useState(false);\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n\n\n    const [open1, setOpen1] = React.useState(false);\n    const handleClickOpen1 = () => {\n        setOpen1(true);\n    };\n    const handleClose1 = () => {\n        setOpen1(false);\n    };\n\n\n    //console.log(\"$\"+img_path+\"$\")\n    //var logo = require('./atom.png');\n    return (\n\n        <div class=\"col-md-3 p-3\" >\n            <div class=\"card box-shadow\">\n                <img class=\"card-img-top mx-auto img-fluid rounded\" src={process.env.PUBLIC_URL + \"/imgs/\" + img_path} width=\"10%\" height=\"10%\" />\n                <div class=\"card-body\">\n                    <p class=\"card-text\"><b>{data_name}</b></p>\n                    <p class=\"card-text\">\n                        <a href=\"http://google.com\" class=\"link\" target=\"_blank\">{uploader_name}</a> ·&nbsp;<span title=\"Sat Apr 29 2023 21:51:36 GMT-0600 (Mountain Daylight Time)\" aria-label=\"3 days ago\">3 days ago</span>\n                    </p>\n                    <p class=\"card-text\">Usability&nbsp;<span class=\"font-weight-bold \">10.0</span> · Size <span class=\"font-weight-bold \">{total_size}</span></p>\n                    <p class=\"card-text\"><b>{num_files}</b>&nbsp;Files · (<b>{type_string}</b>)</p>\n                    <div class=\"d-flex justify-content-between\">\n                        <div class=\"btn-group mr-2\" role=\"group\">\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-primary\">Details</button>\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" onClick={handleClickOpen}>Edit</button>\n                            <button type=\"button\" class=\"btn btn-sm btn-outline-primary\" onClick={handleClickOpen1}>Download</button>\n                        </div>\n                    </div>\n                </div>\n                \n                <DataDownloadPopup data_name={data_name} handleClose={handleClose1} open={open1} />\n                \n\n                \n\n            </div>\n        </div>\n\n    );\n}\n\nexport default DataCard;",[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/CreateNEditDatasetPane.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/InfoCard.js",["126"],[],"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\nfunction InfoCard({ago, data_info, uploader_name, user_score}) {\n  return (\n    <Card sx={{ borderBottom: 1, borderRadius: '16px', borderColor: '#B7B1B0'}}>\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Uploaded: {ago} Days Ago\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          {data_info}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {uploader_name}\n        </Typography>\n        <Typography variant=\"body2\">\n          Rating: <b>{user_score}</b>\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Details</Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default InfoCard;","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/DatasetCreationPopup.js",["127","128","129","130","131","132","133","134"],[],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Typography from '@mui/material/Typography';\nimport { ChangeEvent, useState } from 'react';\nimport DatasetCreationPane from './DatasetCreationPane';\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nfunction BootstrapDialogTitle(props) {\n  const { children, onClose, ...other } = props;\n\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n}\n\nBootstrapDialogTitle.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nfunction DatasetCreationPopup({ header, handleClose, open }) {\n\n  const MAX_COUNT = 5;\n  const [uploadedFiles, setUploadedFiles] = useState([])\n  const [fileLimit, setFileLimit] = useState(false);\n\n\n  // Handler for Data File upload\n  const handleUploadFiles = files => {\n    const uploaded = [...uploadedFiles];\n    let limitExceeded = false;\n\n    files.some((file) => {\n      if (uploaded.findIndex((f) => f.name === file.name) === -1) {\n        uploaded.push(file);\n        if (uploaded.length === MAX_COUNT) setFileLimit(true);\n        if (uploaded.length > MAX_COUNT) {\n          alert(`You can only add a maximum of ${MAX_COUNT} files`);\n          setFileLimit(false);\n          limitExceeded = true;\n          return true;\n        }\n      }\n    })\n    if (!limitExceeded)\n      setUploadedFiles(uploaded)\n\n  }\n\n  const handleFileEvent = (e) => {\n    const chosenFiles = Array.prototype.slice.call(e.target.files)\n    handleUploadFiles(chosenFiles);\n  }\n\n\n  // ACTUAL HTML CONTENTS\n  return (\n    <div class=\"mb-6\">\n      <BootstrapDialog fullWidth maxWidth='md' onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          <b>{header}</b>\n        </BootstrapDialogTitle>\n        \n        <DatasetCreationPane/>\n      </BootstrapDialog>\n    </div>\n  );\n}\n\nexport default DatasetCreationPopup;","/Work2/SCSC/SCSC_FrontEnd/src/cards/popups/DataDownloadPopup.js",["135","136","137"],[],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport { styled } from '@mui/material/styles';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Typography from '@mui/material/Typography';\nimport { ChangeEvent, useState } from 'react';\n\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\n  '& .MuiDialogContent-root': {\n    padding: theme.spacing(2),\n  },\n  '& .MuiDialogActions-root': {\n    padding: theme.spacing(1),\n  },\n}));\n\nfunction BootstrapDialogTitle(props) {\n  const { children, onClose, ...other } = props;\n\n\n  return (\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\n      {children}\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          onClick={onClose}\n          sx={{\n            position: 'absolute',\n            right: 8,\n            top: 8,\n            color: (theme) => theme.palette.grey[500],\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </DialogTitle>\n  );\n}\n\nBootstrapDialogTitle.propTypes = {\n  children: PropTypes.node,\n  onClose: PropTypes.func.isRequired,\n};\n\nfunction DataUploadPopup({ header, handleClose, open }) {\n\n  const MAX_COUNT = 5;\n  const [uploadedFiles, setUploadedFiles] = useState([])\n  const [fileLimit, setFileLimit] = useState(false);\n\n\n  // Handler for Data File upload\n  const handleUploadFiles = files => {\n    const uploaded = [...uploadedFiles];\n    let limitExceeded = false;\n\n    files.some((file) => {\n      if (uploaded.findIndex((f) => f.name === file.name) === -1) {\n        uploaded.push(file);\n        if (uploaded.length === MAX_COUNT) setFileLimit(true);\n        if (uploaded.length > MAX_COUNT) {\n          alert(`You can only add a maximum of ${MAX_COUNT} files`);\n          setFileLimit(false);\n          limitExceeded = true;\n          return true;\n        }\n      }\n    })\n    if (!limitExceeded)\n      setUploadedFiles(uploaded)\n\n  }\n\n  const handleFileEvent = (e) => {\n    const chosenFiles = Array.prototype.slice.call(e.target.files)\n    handleUploadFiles(chosenFiles);\n  }\n\n\n  // ACTUAL HTML CONTENTS\n  return (\n    <div>\n      <BootstrapDialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n        <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {header}\n        </BootstrapDialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Upload your dataset (Fields with asterisk are mandatory.)<br/>\n            Try to include useful information regarding the datasets for an improved usability scores.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose}>\n            Save changes\n          </Button>\n        </DialogActions>\n\n\n\n\n\n        <input id='fileUpload' type='file' multiple\n          accept='application/pdf, image/png'\n          onChange={handleFileEvent}\n          disabled={fileLimit}\n        />\n\n        <label htmlFor='fileUpload'>\n          <a className={`btn btn-primary ${!fileLimit ? '' : 'disabled'} `}>Upload Files</a>\n        </label>\n\n        <div className=\"uploaded-files-list\">\n          {uploadedFiles.map(file => (\n            <div >\n              {file.name}\n            </div>\n          ))}\n        </div>\n\n      </BootstrapDialog>\n    </div>\n  );\n}\n\nexport default DataUploadPopup;","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/DatasetCreationPane.js",["138","139","140","141","142","143","144","145","146","147"],[],"import * as React from 'react';\nimport { useState } from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\nimport Paper from '@mui/material/Paper';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport DataMetadata from './components/DataMetadata';\nimport UploaderInfo from './components/UploaderInfo';\nimport FilesUpload from './components/FilesUpload';\nimport AccessControl from './components/AccessControl';\nimport ThankYou from './components/ThankYou';\nimport Alert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport Collapse from '@mui/material/Collapse';\nimport CloseIcon from '@mui/icons-material/Close';\nimport Snackbar from '@mui/material/Snackbar';\n\nconst steps = ['Data Description', 'Source', 'Access Control', 'File(s) Upload'];\n\n\nconst isEmptyString = (val) => {\n  var v1 = String(val).trim();\n  if (v1.length == 0)\n    return true;\n  return false;\n} \n\nconst validate_pg1 = (info) => {\n  const required_fields = ['accessLevel', 'dataDescription', 'dataName', 'doc'];\n\n  let isValid = true;\n  for (var i = 0; i < required_fields.length; i++) {\n    var fd = required_fields[i];\n    if (info[fd] === undefined || isEmptyString(info[fd])) {\n      //console.log(\">\",fd,info[fd]);\n      isValid = false;\n      break;\n    }\n  }\n\n  return isValid;\n}\n\n\nconst validate_pg2 = (info) => {\n  const required_fields = ['group_access', 'uploaderOrg'];\n\n  let isValid = true;\n  for (var i = 0; i < required_fields.length; i++) {\n    var fd = required_fields[i];\n    if (info[fd] === undefined || isEmptyString(info[fd])) {\n      //console.log(\">\",fd,info[fd]);\n      isValid = false;\n      break;\n    }\n  }\n\n  return isValid;\n}\n\n\nconst validate_pg3 = (info) => {\n  return true;\n}\n\nconst validate_pg4 = (info) => {\n  const required_fields = ['accessLevel', 'dataDescription', 'dataName', 'doc'];\n\n  let isValid = true;\n  for (var i = 0; i < required_fields.length; i++) {\n    var fd = required_fields[i];\n    if (info[fd] === undefined) {\n      //console.log(\">\",fd,info[fd]);\n      isValid = false;\n      break;\n    }\n  }\n\n  return isValid;\n}\n\nconst defaultTheme = createTheme();\n\nexport default function DatasetCreationPane() {\n  // FOR ALERT MESSAGES\n  const [open, setOpen] = React.useState(false);\n  const [alertMsg, setAlertMsg] = React.useState(\"No Error\");\n\n\n  const pageids = ['page1', 'page2', 'page3', 'page4'];\n  const [formData, setFormData] = useState([{}, {}, {}, {}]);\n  const [activeStep, setActiveStep] = React.useState(0);\n\n  // Handles change in input to one of the pages and saves it to the corresponging dictionary inside formData\n  const handleInternalChange_pg1 = (event) => {\n    //console.log(\"D1\",event);\n    var this_page_info = formData[0];\n\n    if (event.target.id === \"doc\") {\n      var target_id = event.target.id;\n      var date_value = event.target.value;\n      this_page_info[target_id] = date_value.$D + '-' + (date_value.$M + 1) + '-' + date_value.$y;\n\n    } else {\n      var target = event.target;\n      var target_id = event.target.id;\n\n      this_page_info[target_id] = target.value;\n      /* if (\"dataName\" === target_id) {\n        this_page_info['groupName'] = target.value;\n      } else if (\"accessLevel\" === target_id) {\n        this_page_info['accessLevel'] = target.value;\n      } else if (\"dataDescription\" === target_id) {\n        this_page_info['dataDescription'] = target.value;\n      } */\n    }\n    console.log(formData);\n  };\n\n  const handleInternalChange_pg2 = (event) => {\n    //console.log(\"D1\",event);\n    var this_page_info = formData[1];\n\n    if (event.target.id === \"doc\") {\n      var target_id = event.target.id;\n      var date_value = event.target.value;\n      this_page_info[target_id] = date_value.$D + '-' + (date_value.$M + 1) + '-' + date_value.$y;\n\n    } else {\n      var target = event.target;\n      var target_id = event.target.id;\n\n      this_page_info[target_id] = target.value;\n      /* if (\"dataName\" === target_id) {\n        this_page_info['groupName'] = target.value;\n      } else if (\"accessLevel\" === target_id) {\n        this_page_info['accessLevel'] = target.value;\n      } else if (\"dataDescription\" === target_id) {\n        this_page_info['dataDescription'] = target.value;\n      } */\n    }\n    console.log(formData);\n  };\n\n  const handleInternalChange_pg3 = (event) => {\n    console.log(\"D3\",event);\n    /*var this_page_info = formData[1];\n\n    if (event.target.id === \"doc\") {\n      var target_id = event.target.id;\n      var date_value = event.target.value;\n      this_page_info[target_id] = date_value.$D + '-' + (date_value.$M + 1) + '-' + date_value.$y;\n\n    } else {\n      var target = event.target;\n      var target_id = event.target.id;\n\n      this_page_info[target_id] = target.value;\n      \n    }\n    console.log(formData);*/\n  };\n\n  function getStepContent(step) {\n    switch (step) {\n      case 0:\n        return <DataMetadata handleInternalChange_pg1={handleInternalChange_pg1} />;\n      case 1:\n        return <UploaderInfo handleInternalChange_pg2={handleInternalChange_pg2}/>;\n      case 2:\n        return <AccessControl handleInternalChange_pg3={handleInternalChange_pg3}/>;\n      case 3:\n        return <FilesUpload />;\n      default:\n        throw new Error('Unknown step');\n    }\n  }\n\n\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n\n  const handleNext = () => {\n    var retval = false;\n    if (activeStep == 0) {\n      retval = validate_pg1(formData[activeStep]);\n    } else if (activeStep == 1) {\n      retval = validate_pg2(formData[activeStep]);\n    } else if (activeStep == 2) {\n      retval = validate_pg3(formData[activeStep]);\n    } else if (activeStep == 3) {\n      retval = validate_pg4(formData[activeStep]);\n    }\n\n\n    console.log(\">>\",retval);\n    if (retval)\n      setActiveStep(activeStep + 1);\n    else {\n      setAlertMsg(\"Missing Elements: Fill-out required fields to proceed.\");\n      setOpen(true);\n    }\n  };\n\n  const handleBack = () => {\n    formData[activeStep-1] = {};\n    setActiveStep(activeStep - 1);\n    console.log(activeStep+1, formData);\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme} >\n      <CssBaseline />\n      <AppBar position=\"absolute\" style={{ background: '#767CA3' }} elevation={0}\n        sx={{\n          position: 'relative',\n          borderBottom: (t) => `1px solid ${t.palette.divider}`,\n        }}\n      >\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Scientific Dataset Creation Pane\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container component=\"main\" maxWidth=\"md\" sx={{ mb: 4 }}>\n        <Paper variant=\"outlined\" sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}>\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n            Dataset Info\n          </Typography>\n\n          <Stepper activeStep={activeStep} sx={{ pt: 3, pb: 5 }}>\n            {steps.map((label) => (\n              <Step key={label}>\n                <StepLabel>{label}</StepLabel>\n              </Step>\n            ))}\n          </Stepper>\n\n          {activeStep === steps.length ? (\n            <ThankYou />\n          ) : (\n            <React.Fragment>\n              {getStepContent(activeStep)}\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                {activeStep !== 0 && (\n                  <Button onClick={handleBack} sx={{ mt: 3, ml: 1 }}>\n                    Back\n                  </Button>\n                )}\n\n                <Button variant=\"contained\" onClick={handleNext} sx={{ mt: 3, ml: 1 }}>\n                  {activeStep === steps.length - 1 ? 'Create Dataset' : 'Next'}\n                </Button>\n              </Box>\n            </React.Fragment>\n          )}\n        </Paper>\n\n\n\n        <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n            <Alert severity='warning' variant='filled'\n              action={\n                <IconButton\n                  aria-label=\"close\"\n                  color=\"inherit\"\n                  size=\"small\"\n                  onClick={() => {\n                    setOpen(false);\n                  }}\n                >\n                  <CloseIcon fontSize=\"inherit\" />\n                </IconButton>\n              }\n              sx={{ mb: 2 }}\n            >\n              {alertMsg}\n            </Alert>\n          </Snackbar>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n      </Container>\n    </ThemeProvider>\n  );\n}","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/DataMetadata.js",["148","149"],[],"import * as React from 'react';\nimport dayjs from 'dayjs';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { DemoContainer } from '@mui/x-date-pickers/internals/demo';\n\nexport default function DataMetadata({ handleInternalChange_pg1 }) {\n  \n  const tomorrow = dayjs().add(1, 'day');\n  const [value, setValue] = React.useState(tomorrow);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        Metadata\n      </Typography>\n      <Grid container spacing={3} onChange={handleInternalChange_pg1}>\n        <Grid item xs={12} sm={6}>\n          <TextField required id=\"dataName\" name=\"dataName\" label=\"Dataset Name\" fullWidth autoComplete=\"given-name\" variant=\"standard\" />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField type=\"number\"  required id=\"accessLevel\" name=\"accessLevel\" label=\"Access Level\" fullWidth variant=\"standard\" />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField required id=\"dataDescription\" name=\"dataDescription\" label=\"Data Description\" fullWidth variant=\"standard\" />\n        </Grid>\n\n        <Grid item xs={12} sm={6}>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <DemoContainer components={['DatePicker']}>\n              <DatePicker disableFuture defaultValue={tomorrow} id=\"doc\" label=\"Date of Collection\" value={value} onChange={(newValue) => {\n                setValue(newValue);\n\n                console.log(\"DD\",newValue);\n                var date_event = {\"target\": {\"id\": \"doc\", 'value': newValue}};\n                \n                handleInternalChange_pg1(date_event);\n                //console.log(\"AA\",event, value);\n                }}/>\n            </DemoContainer>\n          </LocalizationProvider>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField id=\"dataSources\" name=\"dataSources\" label=\"DOI of sources (comma separated)\" fullWidth variant=\"standard\" />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/FilesUpload.js",["150","151","152","153","154","155","156","157"],[],"import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Grid from '@mui/material/Grid';\nimport { ChangeEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport { styled } from '@mui/material/styles';\nimport { InputLabel } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport { Divider } from '@mui/material';\n\nexport default function FilesUpload() {\n\n\n  const MAX_COUNT = 2;\n  const [uploadedFiles, setUploadedFiles] = useState([])\n  const [uploadedImages, setUploadedImages] = useState([])\n  const [fileLimit, setFileLimit] = useState(false);\n  const [logoLimit, setLogoLimit] = useState(false);\n\n\n  // Handler for Data File upload\n  const handleUploadFiles = files => {\n    const uploaded = [...uploadedFiles];\n    let limitExceeded = false;\n\n    files.some((file) => {\n      if (uploaded.findIndex((f) => f.name === file.name) === -1) {\n        uploaded.push(file);\n        if (uploaded.length === MAX_COUNT) setFileLimit(true);\n        if (uploaded.length > MAX_COUNT) {\n          alert(`You can only add a maximum of ${MAX_COUNT} files`);\n          setFileLimit(false);\n          setUploadedFiles(null);\n          limitExceeded = true;\n          return true;\n        }\n      }\n    })\n    if (!limitExceeded)\n      setUploadedFiles(uploaded)\n  }\n\n  // Handler for Image Logo upload\n  const handleUploadLogo = files => {\n    const uploaded = [...uploadedFiles];\n    let limitExceeded = false;\n\n    files.some((file) => {\n      if (uploaded.findIndex((f) => f.name === file.name) === -1) {\n        uploaded.push(file);\n        if (uploaded.length === 1) setLogoLimit(true);\n        if (uploaded.length > 1) {\n          alert(`You can only add 1 logo image`);\n          setLogoLimit(false);\n          limitExceeded = true;\n          setUploadedImages(null);\n          return true;\n        }\n      }\n    })\n    if (!limitExceeded)\n    setUploadedImages(uploaded)\n\n  }\n\n  const handleFileEvent = (e) => {\n    const chosenFiles = Array.prototype.slice.call(e.target.files)\n    handleUploadFiles(chosenFiles);\n  }\n\n  const handleImageEvent = (e) => {\n    const chosenFiles = Array.prototype.slice.call(e.target.files)\n    handleUploadLogo(chosenFiles);\n  }\n\n\n  const accepted_filetypes = 'application/vnd.ms-excel, text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/json'\n\n  const accepted_imageypes = 'image/png, image/jpeg'\n\n  const Div = styled('div')(({ theme }) => ({\n    ...theme.typography.body2,\n    color: 'green',\n    backgroundColor: theme.palette.success,\n    padding: theme.spacing(1),\n  }));\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        Data Files Upload\n      </Typography>\n      <br/>\n      <Grid container spacing={3}>\n        \n        <Grid item xs={12} md={6}>\n            <InputLabel required id=\"dataLogo\" name=\"dataLogo\" fullWidth color=\"primary\" variant=\"info\">Dataset Logo</InputLabel>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Button variant=\"text\" component=\"label\" fullWidth>\n            <input id='logoUpload' type='file' multiple accept={accepted_imageypes} onChange={handleImageEvent} disabled={logoLimit} />\n          </Button>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n          {uploadedImages.map(file => (\n            <Div>\n              {file.name}\n            </Div>\n          ))}\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <InputLabel required id=\"dataFiles\" name=\"dataFiles\" fullWidth variant=\"standard\">Data Files</InputLabel>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Button variant=\"text\" component=\"label\" fullWidth>\n            <input id='fileUpload' type='file' multiple accept={accepted_filetypes} onChange={handleFileEvent} disabled={fileLimit} />\n          </Button>\n        </Grid>\n\n        <Grid item xs={12} md={12}>\n\n          {uploadedFiles.map(file => (\n            <Div>\n              {file.name}\n            </Div>\n          ))}\n\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}","/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/UploaderInfo.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/ThankYou.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/cards/data_upload/components/AccessControl.js",["158"],[],"import * as React from 'react';\nimport { useState } from 'react';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport GroupAdd from '@mui/icons-material/GroupAdd';\nimport GroupRemove from '@mui/icons-material/GroupRemove';\nimport FormGroup from '@mui/material/FormGroup';\nimport Checkbox from '@mui/material/Checkbox';\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\nimport { styled } from '@mui/material/styles';\nimport { Info } from '@mui/icons-material';\n\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\n\n\nconst accessLevelsDefault = {\"VMetadata\": false, \"Visualization\": false, \"Download\": false, \"Upload\": false, \"EMetadata\": false};\nconst accessLevelsList = [\"VMetadata\", \"Visualization\", \"Download\", \"Upload\", \"EMetadata\"];\nconst accesibilityOptions = [{\"key\":\"VMetadata\", \"name\":\"View Metadata\", \"desc\": \"Allows users' to view dataset's metadata.\"},\n                             {\"key\":\"Visualization\", \"name\":\"Visualization\", \"desc\": \"Allows visualization over dataset.\"},\n                             {\"key\":\"Download\", \"name\":\"Download\", \"desc\": \"Allow download of dataset files.\"},\n                             {\"key\":\"Upload\", \"name\":\"Upload Data\", \"desc\": \"Allows upload of new version of the dataset.\"},\n                             {\"key\":\"EMetadata\", \"name\":\"Edit Metadata\", \"desc\": \"Allows users' to update dataset's metadata.\"}]\n          \n// HANDLES TOOLTIP\nfunction MyToolTip({id}) {\n\n  const NoMaxWidthTooltip = styled(({ className, ...props }) => (\n    <Tooltip key={\"net\"+id} {...props} classes={{ popper: className }} />\n    ))({\n    [`& .${tooltipClasses.tooltip}`]: {\n      maxWidth: 'none',\n    },\n  });\n\n\n  return (\n    <>\n      <NoMaxWidthTooltip key={\"net\"+id} title={\n        <React.Fragment key={\"rf\"+id}>\n          <Typography key={\"typo\"+id} color=\"inherit\">Accessibility</Typography>\n          {accesibilityOptions.map((x, i) => {\n            return(<React.Fragment key={ x[\"key\"]+i+\"-\"+id }>\n                      <Typography key={ x[\"key\"]+i+\"-\"+id } variant=\"string\"><b>{x[\"name\"]}</b>: {x[\"desc\"]}</Typography><br/>\n                   </React.Fragment>);\n          })}\n        </React.Fragment>\n      }>\n        \n        <Info key={\"in\"+id}/>\n      </NoMaxWidthTooltip>\n    </>\n  );\n}\n\n\n\n// ACTUAL HANDLING OF THE ACCESS CONTROL TAB\nexport default function AccessControl({handleInternalChange_pg3}) {\n\n  const [dialogOpen, setDialogOpen] = React.useState(false);\n\n  const [groupsList, setGroupsList] = React.useState([]);\n  const [accessNum, setAccessNum] = React.useState(1);\n\n  const [dialogVals, setDialogVals] = useState(accessLevelsDefault);\n\n  // HANDLES THE DROPDOWN OF VARIOUS  ACCESSIBILITY LEVELS\n  function AccessibilityOptions({ op1, op2, op3, op4, op5, groups, group_item, indx}) {\n\n    var optionsList = [op1, op2, op3, op4, op5];\n\n\n    const handleAccessibilityChange = (event) => {\n\n      //console.log(event.target);\n      console.log(\"CHANGED ACCESSIBILITY\", group_item)\n      if (event.target.type === \"checkbox\"){\n        var clickedOption = event.target.value;\n        //console.log(\"CC\", clickedOption, group_item[clickedOption]);\n        if (group_item[clickedOption] === null)\n          group_item[clickedOption] = true;\n        else\n          group_item[clickedOption] = !(group_item[clickedOption]);\n      }\n      \n      setGroupsList(prevGroups => ([...groups]));\n      handleInternalChange_pg3(groupsList);\n\n    };\n\n    return (\n      <>\n        <Grid item xs={12} md={5}>\n          <FormGroup onChange={handleAccessibilityChange}>\n          {accesibilityOptions.map((x, i) => {\n            return(\n              <FormControlLabel key={x[\"key\"]} control={<Checkbox checked={optionsList[i]} value={x[\"key\"]} />} label={x[\"name\"]} />\n            );\n          })}\n\n            \n          </FormGroup>\n        </Grid>\n      </>\n    );\n  }\n\n\n  // HANDLES THE DROPDOWN OF VARIOUS  ACCESSIBILITY LEVELS\n  function AccessibilityOptionsDialog({ dialogVals }) {\n\n    //var optionsList = [op1, op2, op3, op4, op5];\n\n    return (\n      <>\n        <Grid item xs={12} md={5}>\n          <FormGroup>\n          {accesibilityOptions.map((x, i) => {\n            return(\n              <FormControlLabel key={x[\"key\"]} control={<Checkbox checked={dialogVals[i]} value={x[\"key\"]} />} label={x[\"name\"]} />\n            );\n          })}\n\n            \n          </FormGroup>\n        </Grid>\n      </>\n    );\n  }\n\n\n  const handleDialogOpen = (num) => {\n    console.log(\"YOU PRESSED\", num);\n    setDialogOpen(true);\n  };\n\n  // CLOSING DIALOG WITHOUT ADDING\n  const handleDialogClose = () => {\n    setDialogVals(accessLevelsDefault);\n    setDialogOpen(false);\n  };\n\n  const handleDialogChange = (event) => {\n    if (\"dgroup_name\" === event.target.id) {\n      dialogVals['groupName'] = event.target.value\n    } else if (event.target.type === \"checkbox\"){\n      var optname = event.target.value;\n      if (dialogVals[optname] === null)\n        dialogVals[optname] = true;\n      else\n        dialogVals[optname] = !(dialogVals[optname]);\n    }\n\n  };\n\n  // CLICKING ON ADD GROUP\n  const handleDialogAdd = (event) => {\n    setDialogOpen(false);\n    setGroupsList([...groupsList, dialogVals]);\n    setDialogVals(accessLevelsDefault);\n\n  };\n\n  \n\n  const initial_select_members_info = [{ groupName: \"MYGROUP\", \"VMetadata\": true, \"Visualization\": true, \"Download\": true, \"Upload\": true, \"EMetadata\": true}, \n                               { groupName: \"ab\", \"VMetadata\": true}, \n                               { groupName: \"ac\", \"VMetadata\": true}];\n  const initial_groups_info = [{ groupName: \"MYGROUP\", \"VMetadata\": true, \"Visualization\": true, \"Download\": true, \"Upload\": true, \"EMetadata\": true}];\n  const public_groups_info = [{ groupName: \"PUBLIC\", \"VMetadata\": true, \"Visualization\": true, \"Download\": true, \"Upload\": false, \"EMetadata\": false}];\n\n\n  const handleChange = (event) => {\n    setAccessNum(event.target.value);\n    if (event.target.value === 4)\n      setGroupsList([...public_groups_info]);\n    else if (event.target.value === 3)\n      setGroupsList([...initial_select_members_info]);\n    else if (event.target.value === 2)\n      setGroupsList([...initial_groups_info]);\n    else\n      setGroupsList([]);\n    \n    handleInternalChange_pg3(groupsList);\n  };\n\n  const handleSaveState = (event) => {\n    handleInternalChange_pg3(groupsList);\n  };\n\n  const handleRemoveElementOnClick = (num) => {\n    groupsList.splice(num, 1);\n    setGroupsList([...groupsList]);\n    console.log(num);\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h5\" gutterBottom>\n        Access Information\n      </Typography>\n      <Grid container spacing={3}>\n\n        <Grid item xs={12} md={12}>\n          <FormControl fullWidth required>\n            <InputLabel id=\"demo-simple-select-label\">Access Level</InputLabel>\n            <Select labelId=\"demo-simple-select-label\" id=\"groupLevel\" value={accessNum} label=\"groupLevel\" onChange={handleChange}>\n              <MenuItem value={1}>Owner Only</MenuItem>\n              <MenuItem value={2}>Group</MenuItem>\n              <MenuItem value={3}>Select Members</MenuItem>\n              <MenuItem value={4}>All Members</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n\n        {groupsList.map((x, i) => {\n          //console.log(\">>\",x, x[\"\"+accessLevelsList[0]])\n          //console.log(\">> REGENERATING!!\")\n          // FINAL GROUP WITH THE REMOVE AND ADD BUTTON\n          if (groupsList.length === 1) {\n            if (accessNum === 2 || accessNum === 4) {\n              return (\n\n                <React.Fragment key={i}>\n                  <Grid item xs={12} md={2}>\n                    <Button variant=\"text\">{x.groupName}</Button>\n                  </Grid>\n                  <AccessibilityOptions op1={x[accessLevelsList[0]]} op2={x[accessLevelsList[1]]} op3={x[accessLevelsList[2]]} \n                  op4={x[accessLevelsList[3]]} op5={x[accessLevelsList[4]]} groups={groupsList} group_item={groupsList[i]} indx={i}/>\n                  <Grid item xs={12} md={1}>\n                    <MyToolTip id={i}/>\n                  </Grid>\n                  \n                </React.Fragment>\n              );\n            } else {\n              return (\n\n                <React.Fragment key={i}>\n                  <Grid item xs={12} md={2}>\n                    <Button variant=\"text\">{x.groupName}</Button>\n                  </Grid>\n                  <AccessibilityOptions op1={x[accessLevelsList[0]]} op2={x[accessLevelsList[1]]} op3={x[accessLevelsList[2]]} \n                  op4={x[accessLevelsList[3]]} op5={x[accessLevelsList[4]]} groups={groupsList} group_item={groupsList[i]} indx={i}/>\n                  <Grid item xs={12} md={1}>\n                    <MyToolTip id={i}/>\n                  </Grid>\n                  \n                  <Grid item xs={12} md={3}>\n                    <Button variant=\"contained\" key={i} value={i} onClick={() => handleDialogOpen(i)}><GroupAdd /></Button>\n                  </Grid>\n                </React.Fragment>\n              );\n            }\n          } else {\n            if (i === groupsList.length - 1) {\n              return (\n\n                <React.Fragment key={i}>\n                  <Grid item xs={12} md={2}>\n                    <Button variant=\"text\">{x.groupName}</Button>\n                  </Grid>\n                  <AccessibilityOptions op1={x[accessLevelsList[0]]} op2={x[accessLevelsList[1]]} op3={x[accessLevelsList[2]]} \n                  op4={x[accessLevelsList[3]]} op5={x[accessLevelsList[4]]} groups={groupsList} group_item={groupsList[i]} indx={i}/>\n                  <Grid item xs={12} md={1}>\n                    <MyToolTip id={i}/>\n                  </Grid>\n                  <Grid item xs={12} md={1}>\n                    <Button variant=\"outlined\" key={i} value={i} color=\"error\" onClick={() => handleRemoveElementOnClick(i)}><GroupRemove /></Button>\n                  </Grid>\n                  <Grid item xs={12} md={3}>\n                    <Button variant=\"contained\" key={i} value={i} onClick={() => handleDialogOpen(i)}><GroupAdd /></Button>\n                  </Grid>\n                </React.Fragment>\n              );\n            } else {\n              // ALL OTHER GROUPS WITH JUST THE REMOVE BUTTON\n              console.log(\"EE\",x);\n              return (\n\n                <React.Fragment key={i}>\n                  <Grid item xs={12} md={2}>\n                    <Button variant=\"text\">{x.groupName}</Button>\n                  </Grid>\n                  <AccessibilityOptions key={i} op1={x[accessLevelsList[0]]} op2={x[accessLevelsList[1]]} op3={x[accessLevelsList[2]]}\n                    op4={x[accessLevelsList[3]]} op5={x[accessLevelsList[4]]} groups={groupsList} group_item={groupsList[i]} indx={i}/>\n                  <Grid item xs={12} md={1}>\n                    <MyToolTip id={i}/>\n                  </Grid>\n                  <Grid item xs={12} md={3}>\n                    <Button variant=\"outlined\" key={i} value={i} color=\"error\" onClick={() => handleRemoveElementOnClick(i)}><GroupRemove /></Button>\n                  </Grid>\n                </React.Fragment>\n              );\n\n            }\n          }\n        })}\n      </Grid>\n\n\n      <Dialog open={dialogOpen} onClose={handleDialogClose}>\n        <DialogTitle>Grant Group Access</DialogTitle>\n        <DialogContent onChange={handleDialogChange}>\n          <DialogContentText>\n            Enter the name of the group you want to grant permission(s).\n          </DialogContentText>\n\n\n          <Grid item xs={12} md={6}>\n            <TextField required margin=\"dense\" id=\"dgroup_name\" label=\"Group Name\" type=\"dgroup_name\" />\n          </Grid>\n\n          <Grid item xs={12} md={6}>\n            <InputLabel id=\"dialogSelectAccessLevel\">Access Level&nbsp;\n              <MyToolTip id={\"dialogue\"}/>\n            </InputLabel>\n\n            <AccessibilityOptionsDialog dialogVals={dialogVals}/>\n\n          </Grid>\n\n\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleDialogClose}>Cancel</Button>\n          <Button onClick={handleDialogAdd}>Add</Button>\n        </DialogActions>\n      </Dialog>\n\n\n\n\n\n      <Grid item xs={12}>\n        <FormControlLabel control={<Checkbox color=\"secondary\" name=\"saveAddress\" value=\"yes\" />} label=\"Some form of checkbox\" />\n      </Grid>\n    </React.Fragment>\n  );\n}","/Work2/SCSC/SCSC_FrontEnd/src/pages/Home.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/pages/Models.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/pages/Visualization.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/pages/Profile.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/pages/Layout.jsx",["159"],[],"/Work2/SCSC/SCSC_FrontEnd/src/pages/Datasets.js",[],[],"/Work2/SCSC/SCSC_FrontEnd/src/components/SideBar.js",["160","161"],[],"/Work2/SCSC/SCSC_FrontEnd/src/components/Top_Menubar.js",["162"],[],{"ruleId":"163","severity":1,"message":"164","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":12},{"ruleId":"163","severity":1,"message":"167","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":16},{"ruleId":"163","severity":1,"message":"168","line":6,"column":8,"nodeType":"165","messageId":"166","endLine":6,"endColumn":30},{"ruleId":"163","severity":1,"message":"169","line":7,"column":9,"nodeType":"165","messageId":"166","endLine":7,"endColumn":15},{"ruleId":"163","severity":1,"message":"170","line":4,"column":10,"nodeType":"165","messageId":"166","endLine":4,"endColumn":21},{"ruleId":"163","severity":1,"message":"171","line":4,"column":23,"nodeType":"165","messageId":"166","endLine":4,"endColumn":31},{"ruleId":"163","severity":1,"message":"172","line":7,"column":12,"nodeType":"165","messageId":"166","endLine":7,"endColumn":16},{"ruleId":"163","severity":1,"message":"173","line":11,"column":11,"nodeType":"165","messageId":"166","endLine":11,"endColumn":22},{"ruleId":"174","severity":1,"message":"175","line":32,"column":17,"nodeType":"176","endLine":32,"endColumn":147},{"ruleId":"177","severity":1,"message":"178","line":36,"column":25,"nodeType":"176","messageId":"179","endLine":36,"endColumn":82,"fix":"180"},{"ruleId":"163","severity":1,"message":"181","line":2,"column":8,"nodeType":"165","messageId":"166","endLine":2,"endColumn":11},{"ruleId":"163","severity":1,"message":"182","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":14},{"ruleId":"163","severity":1,"message":"183","line":7,"column":8,"nodeType":"165","messageId":"166","endLine":7,"endColumn":21},{"ruleId":"163","severity":1,"message":"184","line":8,"column":8,"nodeType":"165","messageId":"166","endLine":8,"endColumn":21},{"ruleId":"163","severity":1,"message":"185","line":11,"column":8,"nodeType":"165","messageId":"166","endLine":11,"endColumn":18},{"ruleId":"163","severity":1,"message":"170","line":12,"column":10,"nodeType":"165","messageId":"166","endLine":12,"endColumn":21},{"ruleId":"163","severity":1,"message":"186","line":58,"column":10,"nodeType":"165","messageId":"166","endLine":58,"endColumn":19},{"ruleId":"187","severity":1,"message":"188","line":66,"column":23,"nodeType":"189","messageId":"190","endLine":66,"endColumn":25},{"ruleId":"163","severity":1,"message":"191","line":83,"column":9,"nodeType":"165","messageId":"166","endLine":83,"endColumn":24},{"ruleId":"163","severity":1,"message":"170","line":12,"column":10,"nodeType":"165","messageId":"166","endLine":12,"endColumn":21},{"ruleId":"187","severity":1,"message":"188","line":65,"column":23,"nodeType":"189","messageId":"190","endLine":65,"endColumn":25},{"ruleId":"192","severity":1,"message":"193","line":118,"column":11,"nodeType":"176","endLine":118,"endColumn":77},{"ruleId":"163","severity":1,"message":"194","line":22,"column":8,"nodeType":"165","messageId":"166","endLine":22,"endColumn":16},{"ruleId":"195","severity":1,"message":"196","line":31,"column":17,"nodeType":"197","messageId":"198","endLine":31,"endColumn":19},{"ruleId":"163","severity":1,"message":"199","line":98,"column":9,"nodeType":"165","messageId":"166","endLine":98,"endColumn":16},{"ruleId":"163","severity":1,"message":"200","line":99,"column":20,"nodeType":"165","messageId":"166","endLine":99,"endColumn":31},{"ruleId":"201","severity":1,"message":"202","line":114,"column":11,"nodeType":"165","messageId":"203","endLine":114,"endColumn":20},{"ruleId":"201","severity":1,"message":"202","line":139,"column":11,"nodeType":"165","messageId":"203","endLine":139,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":200,"column":20,"nodeType":"197","messageId":"198","endLine":200,"endColumn":22},{"ruleId":"195","severity":1,"message":"196","line":202,"column":27,"nodeType":"197","messageId":"198","endLine":202,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":204,"column":27,"nodeType":"197","messageId":"198","endLine":204,"endColumn":29},{"ruleId":"195","severity":1,"message":"196","line":206,"column":27,"nodeType":"197","messageId":"198","endLine":206,"endColumn":29},{"ruleId":"163","severity":1,"message":"204","line":6,"column":8,"nodeType":"165","messageId":"166","endLine":6,"endColumn":24},{"ruleId":"163","severity":1,"message":"205","line":7,"column":8,"nodeType":"165","messageId":"166","endLine":7,"endColumn":16},{"ruleId":"163","severity":1,"message":"206","line":3,"column":8,"nodeType":"165","messageId":"166","endLine":3,"endColumn":12},{"ruleId":"163","severity":1,"message":"207","line":4,"column":8,"nodeType":"165","messageId":"166","endLine":4,"endColumn":16},{"ruleId":"163","severity":1,"message":"208","line":5,"column":8,"nodeType":"165","messageId":"166","endLine":5,"endColumn":20},{"ruleId":"163","severity":1,"message":"170","line":7,"column":10,"nodeType":"165","messageId":"166","endLine":7,"endColumn":21},{"ruleId":"163","severity":1,"message":"209","line":8,"column":8,"nodeType":"165","messageId":"166","endLine":8,"endColumn":17},{"ruleId":"163","severity":1,"message":"210","line":12,"column":10,"nodeType":"165","messageId":"166","endLine":12,"endColumn":17},{"ruleId":"187","severity":1,"message":"188","line":29,"column":23,"nodeType":"189","messageId":"190","endLine":29,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":51,"column":23,"nodeType":"189","messageId":"190","endLine":51,"endColumn":25},{"ruleId":"163","severity":1,"message":"211","line":198,"column":9,"nodeType":"165","messageId":"166","endLine":198,"endColumn":24},{"ruleId":"212","severity":1,"message":"213","line":9,"column":7,"nodeType":"176","messageId":"214","endLine":9,"endColumn":22},{"ruleId":"163","severity":1,"message":"207","line":11,"column":8,"nodeType":"165","messageId":"166","endLine":11,"endColumn":16},{"ruleId":"163","severity":1,"message":"215","line":13,"column":8,"nodeType":"165","messageId":"166","endLine":13,"endColumn":20},{"ruleId":"163","severity":1,"message":"172","line":22,"column":11,"nodeType":"165","messageId":"166","endLine":22,"endColumn":15},"no-unused-vars","'Main' is defined but never used.","Identifier","unusedVar","'DataCard' is defined but never used.","'CreateNEditDatasetPane' is defined but never used.","'Outlet' is defined but never used.","'ChangeEvent' is defined but never used.","'useState' is defined but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"216","text":"217"},"'Box' is defined but never used.","'Button' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'Typography' is defined but never used.","'fileLimit' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'handleFileEvent' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Collapse' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'pageids' is assigned a value but never used.","'setFormData' is assigned a value but never used.","no-redeclare","'target_id' is already defined.","redeclared","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'TextField' is defined but never used.","'Divider' is defined but never used.","'handleSaveState' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component Top_Menubar must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","'ListItemIcon' is defined but never used.",[1144,1144]," rel=\"noreferrer\""]